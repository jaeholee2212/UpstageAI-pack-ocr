#!/bin/bash

command=${1}
shift

is_apple_silicon() {
  chip=$(/Volumes/Macintosh\ HD/usr/sbin/system_profiler SPHardwareDataType | grep "Apple M1" | sed -e 's/^ *//g' | cut -d " " -f 2,3)
  if [[ chip = "Apple M1" ]]; then
    return 0
  fi
  return 1
}

# Load `.env` into the current run context since `docker stack` does not
# respect dot-files unfortunately.
export $(cat .env) > /dev/null 2>&1;
if [[ is_apple_silicon ]]; then
  export $(cat .env.arm64) > /dev/null 2>&1;
else
  export $(cat .env.amd64) > /dev/null 2>&1;
fi

# Generate a hashed password
INFRA_ADMIN_HASHED_PASSWORD=$(openssl passwd -apr1 ${INFRA_ADMIN_PASSWORD})

ensure_network() {
  local name=$1
  shift
  local filtered=$(docker network ls --filter name=$name --format {{.Name}})
  if [[ $name = $filtered ]]; then
    echo "[network]: previous network destroyed - $(docker network rm $name)"
  fi
  echo "[network]: created - $(docker network create $@ $name)"
}

ensure_plugin_installed() {
  local name=$1
  local filtered=$(docker plugin ls --format {{.Name}} | grep ${name})
  if [[ $name = $filtered ]]; then
    return 0
  fi
  docker plugin install ${name}
  if [[ $? ]]; then
    echo "[plugin]: installed - ${name}"
  fi
  echo "[plugin]: failed to install"
  exit 1
}

ensure_docker_image_downloaded() {
  local name=$1
  local match=$(echo $name | grep -E "\\\$\{.+\}$")
  if [[ ${match} = ${name} ]]; then
    name=$(eval "echo \"${name}\"")
  fi

  local filtered=$(docker image ls --format "{{.Repository}}:{{.Tag}}" | grep ${name})
  if [[ $name = $filtered ]]; then
    return 0
  fi
  echo "[image]: downloading - ${name}"
  docker image pull ${name}
  if [[ $? ]]; then
    echo "[image]: downloaded - ${name}"
    return 0
  fi
  echo "[image]: failed to download (${name})"
  exit 1
}

download_images() {
  yaml=$1
  image_names=$(cat ${yaml} | grep image: | sed -e 's/^ *//g' | cut -d " " -f 2)
  for img in ${image_names[@]}; do
    ensure_docker_image_downloaded ${img}
  done
}

case ${command} in
  storage|lb|logs|db|admin|flags|mons|registry)
    yaml=infra_${command}.yaml
    download_images ${yaml}
    ./stack.sh ${command} ${yaml} $@
   ;;
  node)
    nodeid=$(docker info -f '{{.Swarm.NodeID}}')
    subcmd=$1
    shift
    case ${subcmd} in
      id)
        echo ${nodeid}
        ;;
      add-label)
        docker node update --label-add $@ ${nodeid}
        echo "node labels: $(docker node inspect --format '{{.Spec.Labels}}' ${nodeid})"
        ;;
    esac
    ;;
  init)
    mkdir -p ${PWD}/data/es
    mkdir -p ${PWD}/data/traefik/cert
    mkdir -p ${PWD}/data/couchdb
    mkdir -p ${PWD}/data/influxdb
    ;;
  up)
    echo "[bootup]: swarm advertise address - ${INFRA_SWARM_ADVERTISE_ADDR}"
    docker swarm init --advertise-addr=${INFRA_SWARM_ADVERTISE_ADDR}

    echo "[bootup]: creating mesh networks"
    ensure_network 'infra-public' --driver=overlay --attachable
    ensure_network 'infra-private' --driver=overlay --attachable --internal

    echo "[bootup]: initialize data/storage folders"
    mkdir -p ${PWD}/data/es
    mkdir -p ${PWD}/data/traefik/cert
    mkdir -p ${PWD}/data/couchdb
    mkdir -p ${PWD}/data/influxdb

    echo "[bootup]: node configurations"
    ./infra node add-label db=true

    echo "[bootup]: launch stacks"
    ./infra sup

    echo "[bootup]: ok"
    ;;
  dn|down)
    docker swarm leave --force
    ;;
  sup)
    stacks=(storage lb logs db admin flags mons registry)
    for stk in ${stacks[@]}; do
      ./infra ${stk} up
    done
    ;;
  sdn)
    stacks=(mons flags admin db logs lb registry storage)
    for stk in ${stacks[@]}; do
      ./infra @{stk} down
    done
    ;;
  sre)
    ./infra sdn
    ./infra sup
    ;;
  *)
    echo "info node id -- node id"
    ;;
esac


